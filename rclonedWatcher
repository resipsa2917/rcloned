#!/bin/bash

# Make sure we avoid running multiple instances of this script

LOCKFILE="/var/lock/`basename $0`"
LOCKFD=99

# PRIVATE
_lock()             { flock -$1 $LOCKFD; }
_no_more_locking()  { _lock u; _lock xn && rm -f $LOCKFILE; }
_prepare_locking()  { eval "exec $LOCKFD>\"$LOCKFILE\""; trap _no_more_locking EXIT; }

# ON START
_prepare_locking

# PUBLIC
exlock_now()        { _lock xn; }  # obtain an exclusive lock immediately or fail
exlock()            { _lock x; }   # obtain an exclusive lock
shlock()            { _lock s; }   # obtain a shared lock
unlock()            { _lock u; }   # drop a lock

# CHECK
exlock_now || exit 1

# PROGRAM
logfile="/var/log/rcloned.log"
touch $logfile
IFS="|"

# add more watchers so we don't run out
/usr/sbin/sysctl fs.inotify.max_user_watches=1048576; 
/usr/sbin/sysctl fs.inotify.max_queued_events=2097152;

localDirectory='"/dataEncrypted/My Documents/" "/dataEncrypted/Home Remodel and Repair/"'
excludedPathOnRemote="/dataEncrypted"
remoteRclonePath="acd:"
pipe="/tmp/rcloned"
touch $pipe

echo "Watching: $localDirectory";

io="inotifywait -m -r -e close_write --exclude '(/~|\.tmp|\.bak|\.TMP|\.BAK)' --timefmt '%d/%m/%y|%H:%M:%S' --format '%T|%w|%f' $localDirectory"
echo "Executing: $io";

eval "$io" |
    while read "date" "time" "dir" "file"; do
        echo "date='$date' time='$time' dir='$dir' file='$file'";
        local="\"$dir$file\""
		
		# Escape '$' in local path/filename, YMMV
		localEscaped=$(echo ${local} | sed 's|\$|\\$|g');
		
		# If escaping '$' does not work
		#if [[ $local == *'$'* ]]; then break; else echo '\'$\' in filename not escaped, exiting...'; fi;
		
        remote="$(echo $dir | perl -p -i -e "s|^$excludedPathOnRemote||g")"
        remote="\"$remoteRclonePath$remote\""
		
		# Ony add to queue if it's not already in the queue
        grep -q "$localEscaped $remote" "$pipe" || ( echo "$localEscaped $remote" >> "$pipe"; echo "`date` - rclonedWatcher: $local $remote" >> "$logfile" )
    done;

exit;
