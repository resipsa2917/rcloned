#!/bin/bash

# Make sure we avoid running multiple instances of this script

LOCKFILE="/var/lock/`basename $0`"
LOCKFD=99

# PRIVATE
_lock()             { flock -$1 $LOCKFD; }
_no_more_locking()  { _lock u; _lock xn && rm -f $LOCKFILE; }
_prepare_locking()  { eval "exec $LOCKFD>\"$LOCKFILE\""; trap _no_more_locking EXIT; }

# ON START
_prepare_locking

# PUBLIC
exlock_now()        { _lock xn; }  # obtain an exclusive lock immediately or fail
exlock()            { _lock x; }   # obtain an exclusive lock
shlock()            { _lock s; }   # obtain a shared lock
unlock()            { _lock u; }   # drop a lock

# CHECK
exlock_now || exit 1

# PROGRAM
logfile="/var/log/rcloned.log"
touch $logfile
pipe="/tmp/rcloned"
touch $pipe

while true    
do

# If filesize of $pipe is not 0
	if [[ -s $pipe ]]
		then 
		
			echo "Processing $pipe"
			
			#Remove any blank lines (in case we messed up somehow)
			perl -p -i -e 's|^\n||g' $pipe
			
			readarray -t myArray < $pipe
			
			# Remove any duplicate lines
			eval uniqueArray=($(printf "%q\n" "${myArray[@]}" | sort -u))

			for i in "${uniqueArray[@]}"
				do
					if [ "$i" = "" ]; then continue; fi
					
					out="/usr/local/sbin/rclone copy --bwlimit=1M $i"
					echo "$out"
					echo "`date` - rclonedProcessor: $out" >> $logfile

					#Remove processed file from pipe (no regex with \Q \E)
					perl -p -i -e "s|\Q$i\E||g" $pipe

					# Run rclone
					eval "$out >> $logfile 2>&1"
					
				done

	fi

	sleep 15

done
